<?xml version="1.0" encoding="UTF-8"?>
<results>
    <error file="Department.cpp" line="16" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;description&apos; a value by passing the value to the constructor in the initialization list."/>
    <error file="Department.cpp" line="23" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;description&apos; a value by passing the value to the constructor in the initialization list."/>
    <error file="Item.cpp" line="11" id="uninitMemberVar" severity="style" msg="Member variable &apos;Item::linkedBarCode&apos; is not initialized in the constructor."/>
    <error file="Item.cpp" line="15" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;description&apos; a value by passing the value to the constructor in the initialization list."/>
    <error file="/usr/local/include/boost/asio/buffers_iterator.hpp" line="62" id="syntaxError" severity="error" msg="syntax error"/>
    <error file="/usr/local/include/boost/asio/detail/timer_queue.hpp" line="50" id="uninitMemberVar" severity="style" msg="Member variable &apos;per_timer_data::heap_index_&apos; is not initialized in the constructor."/>
    <error file="/usr/local/include/boost/asio/impl/io_service.hpp" line="30" id="constStatement" severity="style" msg="Redundant code: Found a statement that begins with numeric constant."/>
    <error file="/usr/local/include/boost/asio/impl/io_service.hpp" line="47" id="constStatement" severity="style" msg="Redundant code: Found a statement that begins with numeric constant."/>
    <error file="/usr/local/include/boost/asio/impl/io_service.hpp" line="57" id="constStatement" severity="style" msg="Redundant code: Found a statement that begins with numeric constant."/>
    <error file="/usr/local/include/boost/lexical_cast.hpp" line="75" id="class_X_Y" severity="style" msg="The code &apos;class BOOST_SYMBOL_VISIBLE bad_lexical_cast :&apos; is not handled. You can use -I or --include to add handling of this code."/>
    <error file="/usr/local/include/boost/mpl/aux_/integral_wrapper.hpp" line="72" id="syntaxError" severity="error" msg="syntax error"/>
    <error file="/usr/local/include/boost/type_traits/has_new_operator.hpp" line="110" id="sizeofCalculation" severity="style" msg="Found calculation inside sizeof()."/>
    <error file="/usr/local/include/boost/type_traits/has_new_operator.hpp" line="111" id="sizeofCalculation" severity="style" msg="Found calculation inside sizeof()."/>
    <error file="/usr/local/include/boost/type_traits/has_new_operator.hpp" line="112" id="sizeofCalculation" severity="style" msg="Found calculation inside sizeof()."/>
    <error file="/usr/local/include/boost/type_traits/has_new_operator.hpp" line="113" id="sizeofCalculation" severity="style" msg="Found calculation inside sizeof()."/>
    <error file="/usr/local/include/boost/type_traits/has_new_operator.hpp" line="114" id="sizeofCalculation" severity="style" msg="Found calculation inside sizeof()."/>
    <error file="/usr/local/include/boost/type_traits/has_new_operator.hpp" line="115" id="sizeofCalculation" severity="style" msg="Found calculation inside sizeof()."/>
    <error file="/usr/local/include/boost/type_traits/type_with_alignment.hpp" line="195" id="noConstructor" severity="style" msg="The class &apos;type_with_alignment_imp&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior."/>
    <error file="/usr/local/include/boost/noncopyable.hpp" line="35" id="operatorEq" severity="style" msg="&apos;noncopyable::operator=&apos; should return &apos;noncopyable &amp;&apos;."/>
    <error file="/usr/local/include/boost/noncopyable.hpp" line="35" id="passedByValue" severity="style" msg="Parameter &apos;noncopyable&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++."/>
